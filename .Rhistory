1+2+3
1:50
c(1, 2, 3, 4) + c(10, 20, 30, 40)
x<- 1
x
x<-c(1, 2, 3, 4)
x
x[2]
x[5]
x[[1]]
x[[2]]
q()
?plot
x = 5:10
plot(x)
plot(x, l)
?plot
install.packages("data.table")
# setting a seed to make a random sample reproducible, choose any number you want
set.seed(65)
# with argument name, exact argument order
runif(n = 9, min = 3, max = 6)
set.seed(65)
# without argument name, exact argument order
runif(9, 3, 6)
set.seed(65)
# with argument name, mixed argument order
runif(min = 3, max = 6, n = 9)
set.seed(65)
# without argument name, mixed argument order
runif(3, 6, 9) # this means n=3, max=9
set.seed(65)
# using only the first argument
runif(3)
set.seed(65)
# using arguments 1 and 3
runif(3,,4)
# R as a calculator
4 + 4                        + 5
# Using several operators and round brackets
(5-3)^3
# Creating objects
x <- c(4,5,6)
install.packages("ggplot2")
a = 5:8
b = c(5:8)
?plot.ts
plot.ts(a)
plot.ts(b)
plot.ts(a)
plot.ts(b)
plot.ts(5, 3, 7, 8, 3)
plot.ts(c(5, 3, 7, 8, 3))
plot.ts(c(a, b))
# R as a calculator
4 + 4                        + 5
# Using several operators and round brackets
(5-3)^3
# Creating objects
x <- c(4,5,6)
c(4, 5.2, 76) -> y # arrows work both directions
y
x = c(4, 5, 6)
assign("x", c(4.2, 1, 5)) # function assign
x = c(4,5,6)
x = c(4,5,6)
x # display in console
x = c(4,5,6); x # semicolon indicates a new row of code
# See which objects are already created
ls()
objects()
# Removing an object
rm("x")
# Working with vectors
x = c(y, 5, y)
x
# Sum and roots
sum(x)
sqrt(x)
# Values at a given position within the vector
x[1]
newobject <- x < 5; newobject
x # Comparison against original values
newobject <- x < 5; newobject
x # Comparison against original values
?seq # starting with the seq function
seq() # just using the default settings
# simple sequence from 3 to 5
seq(3, 5)
seq(from = 3, to = 5)
# using length
seq(from = 3, length = 3)
# step manipulations
seq(from = 3, length = 3, by = 0.5)
seq(from = 3, by = 0.5, length = 3) # changed order
?paste # next function
paste(1:4)
class(paste(1:4)) # checking the class
paste("xyz", 1:10)
paste("xyz", c(2,5,7,"test", 4.5)) # random vector with numbers and characters
?rep # next function
rep(c(3,4,5), 3)
rep(c(3,4,5), 3)
rep(1:10, times = 3)
x = c(1,2,3) # creating x
rep(x, each = 3) # using each
rep(x, each = 3, times = 3) # combining arguments
x = 4:20 # our data
which(x == 10) # double equal sign, logical operation
x
which(x == 10) # double equal sign, logical operation
x[3]
install.packages("datasets.load")
?airmiles
?airmiles
head(airmiles) # first 6 rows
tail(airmiles) # last 6 rows
summary(mtcars)
plot(mtcars) # simple xy plot function of R Base
hist(airmiles) # histogram
head(mtcars)
sum(mtcars$wt)
attach(mtcars) # attach to R session environment
sum(wt) # now R knows which data.frame to use since it is attached
detach(mtcars) # remove it from environment
sum(wt) # error message since mtcars it not attached any more
mtcars[2,6]
mtcars[c(2,5,8),6]
setwd("~/Documents/Academia/Sem 5/DA/Assignment1")
mydata = fread("hr-analytics-case-study/general_data.csv")
library(data.table)
#Importing the data using data.table
library(data.table)
mydata = fread("hr-analytics-case-study/general_data.csv")
mydata
mydata[1]
#Importing the data using data.table
library(data.table)
df1 = fread("hr-analytics-case-study/general_data.csv")
df2 = fread("hr-analytics-case-study/manager_survey_data.csv")
df3 = fread("hr-analytics-case-study/employee_survey_data.csv")
summary(df1)
plot(cars)
plot(cars)
#Importing the data using data.table
library(data.table)
#Importing the data using data.table
library(data.table)
df1 = fread("hr-analytics-case-study/general_data.csv")
summary(df1)
df2 = fread("hr-analytics-case-study/manager_survey_data.csv")
summary(df2)
df3 = fread("hr-analytics-case-study/employee_survey_data.csv")
summary(df3)
df3 = fread("hr-analytics-case-study/employee_survey_data.csv")
summary(df3)
x=5:7 # 3 data points, integers
y=8:10
# default plot output here is a scatterplot
plot(x,y)
# data is a time series, default here is a line plot
plot(lynx)
# title, color, title color, title magnification
plot(lynx, main="Lynx Trappings", col="red",
col.main=52, cex.main=1.5)
# label names
plot(lynx, ylab="Lynx Trappings", xlab="")
# label orientation
plot(lynx, ylab="Lynx Trappings", xlab="", las=2)
# changing the session paramter, 2*2 plot matrix
par(mfrow=c(2,2), col.axis="red")
par(mfrow=c(2,2), col.axis="red")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
plot(lynx) # plot for time series data
colors()
?pch
x=2:4
plot(x, pch="c") # using letters as point symbols
plot(x, pch=13) # symbol nr 13
par(mfrow=c(1,1), col.axis="black") # setting parameters back to default
library(plotrix) # add on package for "ablineclip", install if not yet available
install.packages("plotrix")
plot(1:7, ylab="", main="Line Types lty 0:6", xlab="lty 0:6") # test plot
ablineclip(v=1, lty=1, col="sienna2", lwd=2) # solid (default)
? plot
plot(lynx) # plot for time series data
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="b", main="Type c") # lines only of b
plot(lynx, type="o", main="Type o") # points overlaid by lines
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
par(mar=c(4,3,3,3), col.axis="darkgreen") # change of plot margins
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
par(new=T) # allows 2 in 1 plot
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
?par
df3 = na.omit(df3)
df1 = na.omit(df1)
df2 = na.omit(df2)
df3 = na.omit(df3)
#Importing the data using data.table
library(data.table)
df1 = fread("hr-analytics-case-study/general_data.csv")
summary(df1)
df2 = fread("hr-analytics-case-study/manager_survey_data.csv")
summary(df2)
df <- merge(df1, df2, by="EmployeeID")
df
df
dataframe
data <- merge(df, df3, by="EmployeeID")
data
hist(data$Age)
?hist
hist(data$Age, breaks = c(20, 30, 40, 50, 60, 70))
hist(data$Age, breaks = c(0, 10, 20, 30, 40, 50, 60, 70))
hist(data$Age, breaks = c(20, 30, 40, 50, 60, 70), right=FALSE)
hist(data$Age, breaks = c(10, 20, 30, 40, 50, 60, 70, 80), right=FALSE)
hist(data$Age, breaks = c(10, 20, 30, 40, 50, 60, 70, 80), right=FALSE, xlab="Age")
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age"
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = 20
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = 0
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = -1
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = c(20:70)
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = c(20, 70)
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = c(20, 80)
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = c(20, 70)
)
hist(data$Age,
breaks = c(10, 20, 30, 40, 50, 60, 70, 80),
right=FALSE,
xlab="Age",
main="Histogram of Age",
xlim = c(20, 70)
)
paste("Right Skewed Graph, Unimodal")
tapply(data$MonthlyIncome, cut(data$Age, seq(20, 70, by=10)), mean)
tapply(data$MonthlyIncome, cut(data$Age, seq(19, 70, by=10)), mean)
max(tapply(data$MonthlyIncome, cut(data$Age, seq(19, 70, by=10)), mean))
l <- tapply(data$MonthlyIncome, cut(data$Age, seq(19, 70, by=10)), mean)
l <- tapply(data$MonthlyIncome, cut(data$Age, seq(19, 70, by=10)), mean)
l
l <- tapply(data$MonthlyIncome, cut(data$Age, seq(19, 70, by=10)), mean)
which.max(l)
library(dplyr)
install.packages("dplyr")
library(dplyr)
filter(data, Age <=49, Age>=40)
install.packages("dplyr")
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
salary_max
?max
tail(sort(salary_max$MonthlyIncome), 5)
head(salary_max[order(sort(salary_max$MonthlyIncome, decreasing = TRUE), 5)])
head(salary_max[order(salary_max$MonthlyIncome, decreasing = TRUE)], n=5)])
head(salary_max[order(salary_max$MonthlyIncome, decreasing = TRUE)], n=5))
head(salary_max[order(salary_max$MonthlyIncome, decreasing = TRUE), ], n=5)
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
salary_max
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
salary_max
tail(sort(salary_max$MonthlyIncome), 5)
library(dplyr)
salary_max <- filter(data, Age <=49, Age>=40)
salary_max
head(salary_max[order(salary_max$MonthlyIncome, decreasing = TRUE), ], n=5)
max_salary <- head(salary_max[order(salary_max$MonthlyIncome, decreasing = TRUE), ], n=5)
max_salary[c("employeeID", "MonthlyIncome", "TotalWorkingYears")]
max_salary[c("EmployeeID", "MonthlyIncome", "TotalWorkingYears")]
